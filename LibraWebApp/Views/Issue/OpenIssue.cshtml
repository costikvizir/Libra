@model LibraBll.DTOs.Issue.IssueDTO
@{
    Layout = null;
    if (Model != null)
    {
        Model.UserCreated = User.Identity.Name;
    }
}

<link href="~/Content/card-style.css" rel="stylesheet" />
<link href="~/Content/Site.css" rel="stylesheet" />

<h3 class="accent-gray-dark mt-5">Open Issue</h3>
<hr class="my-4">

@*@model LibraBll.DTOs.Pos.PosGetDTO*@

<style>
    .table thead th {
        background-color: #a6c5e4;
    }

    .col1 {
        width: 10%;
    }

    .col2 {
        width: 17%;
    }

    .col3 {
        width: 17%;
    }

    .col4 {
        width: 17%;
    }

    .col5 {
        width: 17%;
    }

    .col6 {
        width: 22%;
    }
</style>

@*@using (Html.BeginForm("AddIssue", "Issue", FormMethod.Post, new { id = "OpenIssueForm" }))*@
@using (Ajax.BeginForm("AddIssue", "Issue", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "mainDiv", OnSuccess = "handleIssueOpenSuccess" }, new { id = "OpenIssueForm" }))
{
    <div class="top-card">
        <div class="card mb-0">
            <div class="card-header slight-blue-header">
                Add Issue for POS
            </div>
            <div class="card-body">
                <div class="row">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Pos Name</th>
                                <th scope="col">Telephone</th>
                                <th scope="col">Cellphone</th>
                                <th scope="col">Brand</th>
                                <th scope="col">Model</th>
                                <th scope="col">Addres</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>@ViewBag.PosName</td>
                                <td>@ViewBag.Telephone</td>
                                <td>@ViewBag.Cellphone</td>
                                <td>@ViewBag.Brand</td>
                                <td>@ViewBag.Model</td>
                                <td>@ViewBag.Address</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="bottom-card">
        <div class="card mt-0">
            @Html.HiddenFor(model => model.PosId, new { Value = ViewBag.PosId })

            <div class="card-header slight-blue-header">
                Add Issue
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- First Column -->
                    <div class="col-md-4 mx-3">
                        <div class="row mb-3">
                            <div class="col-md-5 pr-4">
                                <label for="inputState" class="form-label">Issue Type</label>
                                @Html.DropDownListFor(model => model.Type, (SelectList)ViewBag.IssueNames, "select", new { @class = "form-select dark-blue-border-color", id = "inputType" })
                            </div>
                            <div class="col-md-7 pl-4">
                                <label for="inputState" class="form-label">Subclass</label>
                                @Html.DropDownListFor(model => model.SubType, new SelectList(new[] { "None" }), "Select Subtype", new { @class = "form-select dark-blue-border-color", id = "inputSubclass" })
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="inputAddress" class="form-label">Problem Description</label>
                            <div class="input-group">
                                @Html.TextAreaFor(model => model.Description, new { @class = "form-control dark-blue-border-color", style = "height: 110px; resize: none;" })
                            </div>
                        </div>
                    </div>

                    <!-- Second Column -->
                    <div class="col-md-4 mx-3">
                        <div class="row mb-3">
                            <div class="col-md-6 pr-4">
                                <label for="inputState" class="form-label">Problem</label>
                                @Html.DropDownListFor(model => model.Problem, (SelectList)ViewBag.IssueProblems, "select", new { @class = "form-select dark-blue-border-color", id = "selectProblem" })
                            </div>
                            <div class="col-md-6 pl-4">
                                <label for="inputState" class="form-label">Priority</label>
                                @Html.DropDownListFor(model => model.Priority, (SelectList)ViewBag.PriorityList, "select", new { @class = "form-select dark-blue-border-color", id = "inputStatus" })
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="inputAddress" class="form-label">Solution</label>
                            <div class="input-group">
                                @Html.TextAreaFor(model => model.Solution, new { @class = "form-control dark-blue-border-color", style = "height: 110px; resize: none;" })
                            </div>
                        </div>
                    </div>

                    <!-- Third Column -->
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label for="inputState" class="form-label">Status</label>
                            @Html.DropDownListFor(model => model.Status, (SelectList)ViewBag.Statuses, "Select Status", new { @class = "form-select dark-blue-border-color", id = "inputStatus" })
                        </div>
                        <div class="mb-3">
                            <label for="inputState" class="form-label">Assigned To</label>
                            @Html.DropDownListFor(model => model.AssignedTo, (SelectList)ViewBag.Roles, "Select Role", new { @class = "form-select dark-blue-border-color", id = "inputassignedTo" })
                        </div>
                        <div class="mb-3">
                            <label for="inputmemo" class="form-label">Memo</label>
                            <div class="input-group">
                                <div class="input-group-text dark-blue-backgroung"><i class="fas fa-info"></i></div>
                                @Html.TextBoxFor(model => model.Memo, new { @class = "form-control dark-blue-border-color", placeholder = "Memo" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-start">
        <button type="submit" class="btn dark-blue-backgroung mr-2">Open Issue</button>
        <button type="reset" class="btn dark-blue-backgroung" onclick="resetForm()">Cancel</button>
    </div>
}

<script>
            function handleIssueOpenSuccess() {
                alert('Issue Added Successfully!');
                goToAllIssues();
            }

            @*$(document).ready(function () {
                // Initially disable inputSubclass and selectProblem
                $('#inputSubclass').prop('disabled', true);
                $('#selectProblem').prop('disabled', true);

                // Enable/Disable inputSubclass based on inputType selection
                $('#inputType').change(function () {
                    if ($(this).val() === "select") {
                        $('#inputSubclass').prop('disabled', true);
                        $('#selectProblem').prop('disabled', true);
                    } else {
                        $('#inputSubclass').prop('disabled', false);
                    }
                });

                // Enable/Disable selectProblem based on inputSubclass selection
                $('#inputSubclass').change(function () {
                    if ($(this).val() === "select") {
                        $('#selectProblem').prop('disabled', true);
                        $('#inputType').prop('disabled', false);
                    } else {
                        $('#selectProblem').prop('disabled', false);
                        $('#inputType').prop('disabled', true);
                    }
                });

                $('#inputType').change(function () {
                var selectedTypeId = $(this).val();
                $.ajax({
                    url: '@Url.Action("GetIssueSubtypes", "Issue")', // Replace 'YourControllerName' with the actual name
                    type: 'GET',
                    data: { issueTypeId: selectedTypeId },
                    success: function (data) {
                        var subTypeSelect = $('#inputSubclass');
                        subTypeSelect.empty(); // Clear existing options

                        $.each(data, function (index, subtype) {
                            subTypeSelect.append($('<option>', {
                                value: subtype.Id,
                                text: subtype.SubTypeName // Adjust based on your JSON structure
                            }));
                        });
                    }
                });
            });
            });

        $(document).ready(function () {
            $('#inputType').change(function () {
                var selectedTypeId = $(this).val();
                $.ajax({
                    url: '@Url.Action("GetIssueSubtypes", "Issue")', // Replace 'YourControllerName' with the actual name
                    type: 'GET',
                    data: { issueTypeId: selectedTypeId },
                    success: function (data) {
                        var subTypeSelect = $('#inputSubclass');
                        subTypeSelect.empty(); // Clear existing options

                        $.each(data, function (index, subtype) {
                            subTypeSelect.append($('<option>', {
                                value: subtype.Id,
                                text: subtype.SubTypeName // Adjust based on your JSON structure
                            }));
                        });
                    }
                });
            });
        });*@

  $(document).ready(function () {
    // Initially disable inputSubclass and selectProblem
    $('#inputSubclass').prop('disabled', true);
    $('#selectProblem').prop('disabled', true);

    // Enable/Disable inputSubclass based on inputType selection and fetch subtypes
    $('#inputType').change(function () {
        var selectedTypeId = $(this).val();

        if (selectedTypeId === "select") {
            $('#inputSubclass').prop('disabled', true);
            $('#selectProblem').prop('disabled', true);
            $('#inputSubclass').empty(); // Clear existing options
            $('#inputSubclass').append($('<option>', {
                value: 'select',
                text: 'Select Subtype'
            }));
            $('#selectProblem').empty(); // Clear existing options
            $('#selectProblem').append($('<option>', {
                value: 'select',
                text: 'Select Problem'
            }));
        } else {
            $('#inputSubclass').prop('disabled', false);

            // AJAX call to fetch subtypes
            $.ajax({
                url: '@Url.Action("GetIssueSubtypes", "Issue")', // Replace 'YourControllerName' with the actual name
                type: 'GET',
                data: { issueTypeId: selectedTypeId },
                success: function (data) {
                    var subTypeSelect = $('#inputSubclass');
                    subTypeSelect.empty(); // Clear existing options

                    subTypeSelect.append($('<option>', {
                        value: 'select',
                        text: 'Select Subtype'
                    }));

                    $.each(data, function (index, subtype) {
                        subTypeSelect.append($('<option>', {
                            value: subtype.Id,
                            text: subtype.SubTypeName
                        }));
                    });

                    // Optionally, you can disable selectProblem here until inputSubclass changes
                    $('#selectProblem').prop('disabled', true);
                },
                error: function (xhr, status, error) {
                    console.error("An error occurred while fetching subtypes: " + error);
                }
            });
        }
    });

    // Enable/Disable selectProblem based on inputSubclass selection
    $('#inputSubclass').change(function () {
        if ($(this).val() === "select") {
            $('#selectProblem').prop('disabled', true);
            $('#inputType').prop('disabled', false);
        } else {
            $('#selectProblem').prop('disabled', false);
            $('#inputType').prop('disabled', true);
        }
    });
});
</script>