@model LibraBll.DTOs.Issue.IssuePostDTO
@{
    Layout = null;
    if (Model != null)
    {
        Model.UserCreated = User.Identity.Name;
    }
}

<link href="~/Content/card-style.css" rel="stylesheet" />
<link href="~/Content/Site.css" rel="stylesheet" />

<h3 class="accent-gray-dark mt-5">Open Issue</h3>
<hr class="my-4">

@*@model LibraBll.DTOs.Pos.PosGetDTO*@

@*@using (Html.BeginForm("AddIssue", "Issue", FormMethod.Post, new { id = "OpenIssueForm" }))*@
@using (Ajax.BeginForm("AddIssue", "Issue", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "mainDiv" }, new { id = "OpenIssueForm" }))
{
    <div class="top-card">
        <div class="card mb-0">
            <div class="card-header slight-blue-header">
                Add Issue for POS
            </div>
            <div class="card-body">
                <div class="row">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Pos Name</th>
                                <th scope="col">Telephone</th>
                                <th scope="col">Cellphone</th>
                                <th scope="col">Brand</th>
                                <th scope="col">Model</th>
                                <th scope="col">Addres</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>@ViewBag.PosName</td>
                                <td>@ViewBag.Telephone</td>
                                <td>@ViewBag.Cellphone</td>
                                <td>@ViewBag.Brand</td>
                                <td>@ViewBag.Model</td>
                                <td>@ViewBag.Address</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="bottom-card">
        <div class="card mt-0">
            @Html.HiddenFor(model => model.PosId, new { Value = ViewBag.PosId })

            <div class="card-header slight-blue-header">
                Add Issue
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- First Column -->
                    <div class="col-md-4 mx-3 pl-4">
                        <div class="row mb-3">
                            <div class="col-md-5 pr-4">
                                <label for="inputState" class="form-label">Issue Type</label>
                                @Html.DropDownListFor(model => model.Type, (SelectList)ViewBag.IssueNames, "select", new { @class = "form-select dark-blue-border-color", id = "inputType" })
                                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-7 pl-4">
                                <label for="inputState" class="form-label">Subclass</label>
                                @Html.DropDownListFor(model => model.SubType, new SelectList(new[] { "None" }), "Select Subtype", new { @class = "form-select dark-blue-border-color", id = "inputSubclass" })
                                @Html.ValidationMessageFor(model => model.SubType, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="inputAddress" class="form-label">Problem Description</label>
                            <div class="input-group">
                                @Html.TextAreaFor(model => model.Description, new { @class = "form-control dark-blue-border-color", style = "height: 110px; resize: none;" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!-- Second Column -->
                    <div class="col-md-4 mx-3">
                        <div class="row mb-3">
                            <div class="col-md-7 pr-4">
                                <label for="inputState" class="form-label">Problem</label>
                                @Html.DropDownListFor(model => model.Problem, new SelectList(new[] { "None" }), "Select Problem", new { @class = "form-select dark-blue-border-color", id = "selectProblem" })
                                @Html.ValidationMessageFor(model => model.Problem, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-5 pl-4">
                                <label for="inputState" class="form-label">Priority</label>
                                @Html.DropDownListFor(model => model.Priority, (SelectList)ViewBag.PriorityList, "select", new { @class = "form-select dark-blue-border-color", id = "inputStatus" })
                                @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="inputAddress" class="form-label">Solution</label>
                            <div class="input-group">
                                @Html.TextAreaFor(model => model.Solution, new { @class = "form-control dark-blue-border-color", style = "height: 110px; resize: none;" })
                            </div>
                        </div>
                    </div>

                    <!-- Third Column -->
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label for="inputState" class="form-label">Status</label>
                            @Html.DropDownListFor(model => model.Status, (SelectList)ViewBag.Statuses, "Select Status", new { @class = "form-select dark-blue-border-color", id = "inputStatus" })
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <label for="inputState" class="form-label">Assigned To</label>
                            @Html.DropDownListFor(model => model.AssignedTo, (SelectList)ViewBag.Roles, "Select Role", new { @class = "form-select dark-blue-border-color", id = "inputassignedTo" })
                            @Html.ValidationMessageFor(model => model.AssignedTo, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <label for="inputmemo" class="form-label">Memo</label>
                            <div class="input-group">
                                <div class="input-group-text dark-blue-background"><i class="fas fa-info"></i></div>
                                @Html.TextBoxFor(model => model.Memo, new { @class = "form-control dark-blue-border-color", placeholder = "Memo" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-start">
        <button type="submit" class="btn dark-blue-background-btn mr-2">Open Issue</button>
        <button type="reset" class="btn dark-blue-background-btn" onclick="goToHomePage()">Cancel</button>
    </div>
}

<script>

        $(document).ready(function () {
            // Initially disable inputSubclass and selectProblem
            $('#inputSubclass').prop('disabled', true);
            $('#selectProblem').prop('disabled', true);

            // Enable/Disable inputSubclass based on inputType selection and fetch subtypes
            $('#inputType').change(function () {
                debugger;
                var selectedTypeId = $(this).val();

                //Reset and disable selectProblem every time inputType changes
                $('#selectProblem').prop('disabled', true);
                $('#selectProblem').empty(); // Clear existing options
                $('#selectProblem').append($('<option>', {
                    value: 'select',
                    text: 'Select Problem'
                }));

                if (selectedTypeId === "select") {
                    $('#inputSubclass').prop('disabled', true);
                    $('#selectProblem').prop('disabled', true);
                    $('#inputSubclass').empty(); // Clear existing options
                    $('#inputSubclass').append($('<option>', {
                        value: 'select',
                        text: 'Select Subtype'
                    }));
                    $('#selectProblem').empty(); // Clear existing options
                    $('#selectProblem').append($('<option>', {
                        value: 'select',
                        text: 'Select Problem'
                    }));
                } else {
                    $('#inputSubclass').prop('disabled', false);

                    // AJAX call to fetch subtypes
                    $.ajax({
                        url: '@Url.Action("GetIssueSubtypes", "Issue")', // Replace 'Issue' with the actual controller name if different
                        type: 'GET',
                        data: { issueTypeId: selectedTypeId },
                        success: function (data) {
                            var subTypeSelect = $('#inputSubclass');
                            subTypeSelect.empty(); // Clear existing options

                            subTypeSelect.append($('<option>', {
                                value: 'select',
                                text: 'Select Subtype'
                            }));

                            $.each(data, function (index, subtype) {
                                subTypeSelect.append($('<option>', {
                                    value: subtype.Id,
                                    text: subtype.SubTypeName
                                }));
                            });

                            // Disable selectProblem until a subtype is selected
                            $('#selectProblem').prop('disabled', true);
                        },
                        error: function (xhr, status, error) {
                            console.error("An error occurred while fetching subtypes: " + error);
                        }
                    });
                }
            });

            // Enable/Disable selectProblem based on inputSubclass selection and fetch problems
            $('#inputSubclass').change(function () {
                var selectedSubtypeId = $(this).val();

                if (selectedSubtypeId === "select") {
                    $('#selectProblem').prop('disabled', true);
                    //$('#inputType').prop('disabled', false);
                    $('#selectProblem').empty(); // Clear existing options
                    $('#selectProblem').append($('<option>', {
                        value: 'select',
                        text: 'Select Problem'
                    }));
                } else {
                    $('#selectProblem').prop('disabled', false);

                    // AJAX call to fetch problems
                    $.ajax({
                        url: '@Url.Action("GetProblemNames", "Issue")', // Endpoint for fetching problems
                        type: 'GET',
                        data: { issueTypeId: selectedSubtypeId },
                        success: function (data) {
                            var problemSelect = $('#selectProblem');
                            problemSelect.empty(); // Clear existing options

                            problemSelect.append($('<option>', {
                                value: 'select',
                                text: 'Select Problem'
                            }));

                            $.each(data, function (index, problem) {
                                problemSelect.append($('<option>', {
                                    value: problem.Id,
                                    text: problem.ProblemName
                                }));
                            });

                           // $('#inputType').prop('disabled', true);
                        },
                        error: function (xhr, status, error) {
                            console.error("An error occurred while fetching problems: " + error);
                        }
                    });
                }
            });
        });

        $(document).on('submit', '#OpenIssueForm', function (event) {
            debugger;
            event.preventDefault();

            $.ajax({
                url: $(this).attr('action'),
                type: $(this).attr('method'),
                data: $(this).serialize(),
                success: function (response) {
                    $('#mainDiv').html(response);
                    console.log("success add issue");
                    console.log(response.success);
                    // Call handleUserAddSuccess only if the response indicates success

                    if (response.success) {
                        handleIssueOpenSuccess();
                    } else {
                        // console.error('Error in response: ', response);
                        console.log("Inside error add issue");
                    }
                },
                error: function (xhr, status, error) {
                    console.error(error);
                    console.log("Outside error add issue");
                }
            });
        });

        function handleIssueOpenSuccess() {
            debugger;
            alert('Issue Added Successfully!');
            goToAllIssues();
            initializeIssuesList();
        }

        function goToHomePage() {
            debugger;
            $.ajax({
                url: "/Home/Index",
                data: {
                },
                xhrFields: {
                    withCredentials: true
                },
                method: "GET",
                success: function (response) {
                    $("#mainDiv").html(null);
                    $("#mainDiv").html(response);
                },
            });
        }
</script>