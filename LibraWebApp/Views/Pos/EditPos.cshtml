@{
    //Layout = "~/Views/Shared/_LayoutLTE.cshtml";
    Layout = null;
}

<h3 class="accent-gray-dark mt-5">Edit POS</h3>

<link href="~/Content/Site.css" rel="stylesheet" />

@model LibraBll.DTOs.Pos.PosEditDTO

@using (Ajax.BeginForm("UpdatePos", "Pos", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "mainContainer" }, new { id = "EditPosForm" }))
{
    @Html.HiddenFor(model => model.Id)
    <div class="card mb-0">
        <div class="card-header" style="background-color: #D9EDF7">
            POS basic data
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-5 px-4">
                    <label for="inputPosName" class="form-label">Name</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-credit-card"></i></div>
                        @Html.TextBoxFor(model => model.Name, new { @class = "form-control dark-blue-border-color", id = "inputPosName", placeholder = "POS Name" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3 pr-4">
                    <label for="inputTelephone" class="form-label">Telephone</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-phone"></i></div>
                        @Html.TextBoxFor(model => model.Telephone, new { @class = "form-control dark-blue-border-color", id = "inputTelephone", placeholder = "Telephone" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Telephone, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    <label for="inputCellphone" class="form-label">Cellphone</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-mobile"></i></div>
                        @Html.TextBoxFor(model => model.Cellphone, new { @class = "form-control dark-blue-border-color", id = "inputCellphone", placeholder = "Cellphone" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Cellphone, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-8 px-4">
                    <label for="inputAddress" class="form-label">Full Address</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-map"></i></div>
                        @Html.TextBoxFor(model => model.Address, new { @class = "form-control dark-blue-border-color", id = "inputAddress", placeholder = "POS address" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    <label for="inputState" class="form-label">City</label>
                    @Html.DropDownListFor(model => model.CityId, (SelectList)ViewBag.Cities, new { @class = "form-select dark-blue-border-color", id = "inputState" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 px-4">
                    <label for="inputBrand" class="form-label">Brand</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-copyright"></i></div>
                        @Html.TextBoxFor(model => model.Brand, new { @class = "form-control dark-blue-border-color", id = "inputBrand", placeholder = "Brand Name" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 pr-4">
                    <label for="inputModel" class="form-label">Model</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-copyright"></i></div>
                        @Html.TextBoxFor(model => model.Model, new { @class = "form-control dark-blue-border-color", id = "inputModel", placeholder = "Model Name" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    <label for="inputState" class="form-label">Connection Type</label>
                    @Html.DropDownListFor(model => model.ConnectionType, (SelectList)ViewBag.ConnectionTypes, new { @class = "form-select dark-blue-border-color", id = "inputState" })
                </div>
            </div>
        </div>
    </div>
    <div class="card mt-0">
        <div class="card-header" style="background-color: #D9EDF7">
            Oppening hours and holidays
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-2 px-4">
                    <label for="inputOpenMorning" class="form-label">Open Morning</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-clock"></i></div>
                        @Html.TextBoxFor(model => model.MorningOpening, new { @class = "form-control timepicker dark-blue-border-color", id = "inputMorningOpening", placeholder = "Opening Time", type = "text" })
                    </div>
                </div>
                <div class="col-md-2 pr-4">
                    <label for="inputClosedMorning" class="form-label">Closed Morning</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-clock"></i></div>
                        @Html.TextBoxFor(model => model.MorningClosing, new { @class = "form-control timepicker dark-blue-border-color", id = "inputMorningClosing", placeholder = "Closing Time", type = "text" })
                    </div>
                </div>
                <div class="col-md-2 pr-4">
                    <label for="inputOpenafternoon" class="form-label">Open Afternoon</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-clock"></i></div>
                        @Html.TextBoxFor(model => model.AfternoonOpening, new { @class = "form-control timepicker dark-blue-border-color", id = "inputAfternoonOpening", placeholder = "Opening Time", type = "text" })
                    </div>
                </div>
                <div class="col-md-2 pr-4">
                    <label for="inputClosedAfternoon" class="form-label">Closed Afternoon</label>
                    <div class="input-group">
                        <div class="input-group-text dark-blue-background"><i class="fas fa-clock"></i></div>
                        @Html.TextBoxFor(model => model.AfternoonClosing, new { @class = "form-control timepicker dark-blue-border-color", id = "inputAfternoonClosing", placeholder = "Closing Time", type = "text" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mt-2 pl-4">
                    <label for="dayOfWeekLabel" class="form-label">Closing Days</label>
                    <div>
                        <div class="form-check form-check-inline">
                            @Html.CheckBox("dayOfWeek", Model.DaysClosed.Contains("Mon"), new { @class = "form-check-input dark-blue-border-color", value = "Mon" })
                            <label class="form-check-label" for="monday">Mon</label>
                        </div>
                        <div class="form-check form-check-inline">
                            @Html.CheckBox("dayOfWeek", Model.DaysClosed.Contains("Tue"), new { @class = "form-check-input dark-blue-border-color", value = "Tue" })
                            <label class="form-check-label" for="tuesday">Tue</label>
                        </div>
                        <div class="form-check form-check-inline">
                            @Html.CheckBox("dayOfWeek", Model.DaysClosed.Contains("Wed"), new { @class = "form-check-input dark-blue-border-color", value = "Wed" })
                            <label class="form-check-label" for="wednesday">Wed</label>
                        </div>
                        <div class="form-check form-check-inline">
                            @Html.CheckBox("dayOfWeek", Model.DaysClosed.Contains("Thu"), new { @class = "form-check-input dark-blue-border-color", value = "Thu" })
                            <label class="form-check-label" for="thursday">Thu</label>
                        </div>
                        <div class="form-check form-check-inline">
                            @Html.CheckBox("dayOfWeek", Model.DaysClosed.Contains("Fri"), new { @class = "form-check-input dark-blue-border-color", value = "Fri" })
                            <label class="form-check-label" for="friday">Fri</label>
                        </div>
                        <div class="form-check form-check-inline">
                            @Html.CheckBox("dayOfWeek", Model.DaysClosed.Contains("Sat"), new { @class = "form-check-input dark-blue-border-color", value = "Sat" })
                            <label class="form-check-label" for="saturday">Sat</label>
                        </div>
                        <div class="form-check form-check-inline">
                            @Html.CheckBox("dayOfWeek", Model.DaysClosed.Contains("Sun"), new { @class = "form-check-input dark-blue-border-color", value = "Sun" })
                            <label class="form-check-label" for="sunday">Sun</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-start">
        <button type="submit" class="btn dark-blue-background-btn mr-2">Update POS</button>
        <button type="reset" class="btn dark-blue-background-btn mr-2" onclick="goToAllPos()">Cancel</button>
    </div>
}

<script src="~/Scripts/TimePicker/moment.min.js"></script>
<script src="~/Scripts/TimePicker/bootstrap-datetimepicker.min.js"></script>
<script src="~/Scripts/TimePicker/timepicker-validator.js"></script>

<script>
    //function goToAddUser() {
    //    debugger;
    //    $.ajax({
    //        url: "/User/AddUser",
    //        data: {
    //        },
    //        xhrFields: {
    //            withCredentials: true
    //        },
    //        method: "GET",
    //        success: function (response) {
    //            $("#mainDiv").html(null);
    //            $("#mainDiv").html(response);
    //        },
    //    });
    //}

    $(document).on('submit', '#EditPosForm', function (event) {
        debugger;
        event.preventDefault();

        $.ajax({
            url: $(this).attr('action'),
            type: $(this).attr('method'),
            data: $(this).serialize(),
            success: function (response) {
                $('#mainDiv').html(response);
                console.log("success edit pos");
                console.log(response.success);
                // Call handleUserAddSuccess only if the response indicates success

                if (response.success) {
                    handleUserAddSuccess();
                } else {
                    // console.error('Error in response: ', response);
                    console.log("Inside error edit pos");
                }
            },
            error: function (xhr, status, error) {
                console.error(error);
                console.log("Outside error edit pos");
            }
        });
    });

    function goToAllPos() {
        debugger;
        $.ajax({
            url: "/Pos/GetAllPos",
            data: {
            },
            xhrFields: {
                withCredentials: true
            },
            method: "GET",
            success: function (response) {
                $("#mainDiv").html(null);
                $("#mainDiv").html(response);
                initializePosList();
            },
        });
    }

    function handleUserAddSuccess() {
        debugger;
        alert('Pos edited successfully');
        goToAllPos();
        initializePosList(); // Initialize DataTables after loading the view
    }
</script>